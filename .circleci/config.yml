version: 2
image: ubuntu:16.04
jobs:
  build:
    docker:
      - image: circleci/node:10.15.1-jessie-browsers

    working_directory: ~/repo

    environment:
        TZ: America/Sao_Paulo

    steps:
      - checkout

      - restore_cache:
          keys:
          - dependencies-{{ checksum "yarn.lock" }}
          - dependencies-

      - run: yarn

      - run: |
          cd packages/cockpit
          yarn lint
          yarn test
          yarn build

      - run: |
          cd packages/pilot
          yarn lint
          yarn build
          yarn build-storybook
          yarn percy; true

      - save_cache:
          paths:
            - node_modules
            - packages/cockpit/node_modules
            - packages/pilot/node_modules
          key: dependencies-{{ checksum "yarn.lock" }}
  build_stg:
    docker:
      - image: circleci/node:10.15.1-jessie-browsers

    working_directory: ~/repo

    steps:
      - checkout

      - restore_cache:
          keys:
          - dependencies-{{ checksum "yarn.lock" }}
          - dependencies-

      - run: yarn

      - run: |
          cd packages/cockpit
          yarn build

      - run: |
          cd packages
          cp -rf pilot pilot-latest-live
          cp -rf pilot pilot-${CIRCLE_TAG}-live
          cp -rf pilot pilot-latest-sandbox
          cp -rf pilot pilot-${CIRCLE_TAG}-sandbox
          cd pilot-latest-live
          export PUBLIC_URL_REGEX='https:\/\/beta.dashboard.stg.pagarme.net\/latest'
          export PUBLIC_URL='https://beta.dashboard.stg.pagarme.net/latest'
          export REACT_APP_LIVE_URL='https://beta.dashboard.stg.pagarme.net/latest/index.html'
          export REACT_APP_TEST_URL='https://beta.dashboard.sandbox.stg.pagarme.net/latest/index.html'
          export REACT_APP_API_ENVIRONMENT='live'
          sed -e 's/\".\"/"'$PUBLIC_URL_REGEX'\"/g' package.json > package.json.bak
          cp package.json.bak package.json
          yarn build
          cd ../pilot-latest-sandbox
          export PUBLIC_URL_REGEX='https:\/\/beta.dashboard.sandbox.stg.pagarme.net\/latest'
          export PUBLIC_URL='https://beta.dashboard.sandbox.stg.pagarme.net/latest'
          export REACT_APP_API_ENVIRONMENT='sandbox'
          sed -e 's/\".\"/"'$PUBLIC_URL_REGEX'\"/g' package.json > package.json.bak
          cp package.json.bak package.json
          yarn build
          cd ../pilot-${CIRCLE_TAG}-live
          export PUBLIC_URL_REGEX='https:\/\/beta.dashboard.stg.pagarme.net\/versions\/'${CIRCLE_TAG}
          export PUBLIC_URL='https://beta.dashboard.stg.pagarme.net/versions/'${CIRCLE_TAG}
          export REACT_APP_LIVE_URL='https://beta.dashboard.stg.pagarme.net/versions/'${CIRCLE_TAG}'/index.html'
          export REACT_APP_TEST_URL='https://beta.dashboard.sandbox.stg.pagarme.net/versions/'${CIRCLE_TAG}'/index.html'
          export REACT_APP_API_ENVIRONMENT='live'
          sed -e 's/\".\"/"'$PUBLIC_URL_REGEX'\"/g' package.json > package.json.bak
          cp package.json.bak package.json
          yarn build
          cd ../pilot-${CIRCLE_TAG}-sandbox
          export PUBLIC_URL_REGEX='https:\/\/beta.dashboard.sandbox.stg.pagarme.net\/versions\/'${CIRCLE_TAG}
          export PUBLIC_URL='https://beta.dashboard.sandbox.stg.pagarme.net/versions/'${CIRCLE_TAG}
          export REACT_APP_API_ENVIRONMENT='sandbox'
          sed -e 's/\".\"/"'$PUBLIC_URL_REGEX'\"/g' package.json > package.json.bak
          cp package.json.bak package.json
          yarn build
      - run: |
         cd packages
         mkdir builds
         mv pilot-latest-live/build builds/pilot-latest-live
         mv pilot-${CIRCLE_TAG}-live/build builds/pilot-${CIRCLE_TAG}-live
         mv pilot-latest-sandbox/build builds/pilot-latest-sandbox
         mv pilot-${CIRCLE_TAG}-sandbox/build builds/pilot-${CIRCLE_TAG}-sandbox
      - persist_to_workspace:
          root: packages
          paths:
            - builds
  build_prd:
    docker:
      - image: circleci/node:10.15.1-jessie-browsers

    working_directory: ~/repo

    steps:
      - checkout

      - restore_cache:
          keys:
          - dependencies-{{ checksum "yarn.lock" }}
          - dependencies-

      - run: yarn

      - run: |
          cd packages/cockpit
          yarn build

      - run: |
          cd packages
          cp -rf pilot pilot-live
          cp -rf pilot pilot-sandbox
          cd pilot-live
          export PUBLIC_URL_REGEX='https:\/\/beta.dashboard.pagar.me'
          export PUBLIC_URL='https://beta.dashboard.pagar.me'
          export REACT_APP_LIVE_URL='https://beta.dashboard.pagar.me/'
          export REACT_APP_TEST_URL='https://beta.dashboard.sandbox.pagar.me/'
          export REACT_APP_API_ENVIRONMENT='live'
          sed -e 's/\".\"/"'$PUBLIC_URL_REGEX'\"/g' package.json > package.json.bak
          cp package.json.bak package.json
          yarn build
          cd ../pilot-sandbox
          export PUBLIC_URL_REGEX='https:\/\/beta.dashboard.sandbox.pagar.me'
          export PUBLIC_URL='https://beta.dashboard.sandbox.pagar.me'
          export REACT_APP_API_ENVIRONMENT='sandbox'
          sed -e 's/\".\"/"'$PUBLIC_URL_REGEX'\"/g' package.json > package.json.bak
          cp package.json.bak package.json
          yarn build
      - run: |
         cd packages
         mkdir builds
         mv pilot-live/build builds/pilot-live
         mv pilot-sandbox/build builds/pilot-sandbox
      - persist_to_workspace:
          root: packages
          paths:
            - builds
  deploy_stg:
    machine:
        enabled: true
    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Deploy to S3 files of version for stg (live)
          command: |
            mkdir -p live/versions
            mv builds/pilot-latest-live live/latest
            mv builds/pilot-${CIRCLE_TAG}-live live/versions/${CIRCLE_TAG}
            aws s3 sync --delete ./live/latest s3://beta.dashboard.stg.pagarme.net/latest
            aws s3 sync ./live/versions s3://beta.dashboard.stg.pagarme.net/versions
            aws cloudfront create-invalidation --distribution-id $CDN_DISTRIBUTION_ID --paths "/latest/*"
      - run:
          name: Deploy to S3 files of version for stg (sandbox)
          command: |
            mkdir -p sandbox/versions
            mv builds/pilot-latest-sandbox sandbox/latest
            mv builds/pilot-${CIRCLE_TAG}-sandbox sandbox/versions/${CIRCLE_TAG}
            aws s3 sync --delete ./sandbox/latest s3://beta.dashboard.sandbox.stg.pagarme.net/latest
            aws s3 sync ./sandbox/versions s3://beta.dashboard.sandbox.stg.pagarme.net/versions
            aws cloudfront create-invalidation --distribution-id $CDN_DISTRIBUTION_ID_SANDBOX --paths "/latest/*"
  deploy_prd:
    machine:
        enabled: true
    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: ~/repo/
      - run:
          name: Deploy to S3 files of version fo prod (live)
          command: |
            cd builds/pilot-live
            AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_PRD AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_PRD aws s3 sync --delete . s3://beta.dashboard.prd.pagarme.net
            AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_PRD AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_PRD aws cloudfront create-invalidation --distribution-id $PRD_CDN_DISTRIBUTION_ID --paths "/*"
            cd ../../builds/pilot-sandbox
            AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_PRD AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_PRD aws s3 sync --delete . s3://beta.dashboard.sandbox.prd.pagarme.net
            AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_PRD AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_PRD aws cloudfront create-invalidation --distribution-id $PRD_CDN_DISTRIBUTION_ID_SANDBOX --paths "/*"
  pre_hold:
    machine:
          enabled: true
    working_directory: ~/repo
    steps:
      - run:
          name: Call the team for holded process
          command: |
            pip install slack-webhook-cli
            slack "upgrade do seu jaeger está pronto, certifique que a versão $CIRCLE_TAG está correto em $CIRCLE_BUILD_URL"

workflows:
  version: 2
  build-and-deploy:
    jobs:
    - build:
        filters:
          tags:
            only: /^v.*/
    - build_stg:
        requires:
        - build
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v([0-9]+).([0-9]+).([0-9]+).*$/
    - deploy_stg:
        requires:
        - build_stg
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v([0-9]+).([0-9]+).([0-9]+).*$/
    - pre_hold:
        requires:
          - deploy_stg
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v([0-9]+).([0-9]+).([0-9]+)$/
    - hold:
        type: approval
        requires:
          - pre_hold
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v([0-9]+).([0-9]+).([0-9]+)$/
    - build_prd:
        requires:
        - hold
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v([0-9]+).([0-9]+).([0-9]+).*$/
    - deploy_prd:
        requires:
        - build_prd
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v([0-9]+).([0-9]+).([0-9]+)$/
